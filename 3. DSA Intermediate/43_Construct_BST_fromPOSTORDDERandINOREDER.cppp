/*
Description
Given postorder and inorder traversal of a tree, construct the binary tree and return its root. Note: You may assume that duplicates do not exist in the tree.

Input format
First line contains N, number of elements in the tree.

Next line contains N space separated integers, denoting postorder.

Next line contains N space separated integers, denoting inorder.

Output format
Print two lines, first line contains N space separated integers denoting postorder.

Second line contains N space separated integers, denoting inorder.

Note: You just have to return the root of the tree. The input/output is already handled.

Sample Input 1
5

10 4 5 7 8

8 10 4 7 5

Sample Output 1
10 4 5 7 8

8 10 4 7 5

Explanation
The below tree can be formed with the given postorder and inorder Visualization:

image

Constraints
1 <= N <= 10^5

-10^9 <= Value of node <= 10^9
*/




int search(vector<int> &arr , int start,int end, int val){
   
    for(int i=start;i<=end;i++){
        if(arr[i]==val){
            return i;
        }
    }
    return -1;
}

TreeNode* buildTree(vector<int> &inorder,vector<int> &postorder,int Start,int End,int &pIndex){
    if(Start>End)return NULL;
    TreeNode* node=new TreeNode(postorder[pIndex]);
    pIndex--;
    if(Start==End)return node;
    int Index=search(inorder,Start,End,node->val);

    node->right=buildTree(inorder,postorder,Index+1,End,pIndex);
    node->left=buildTree(inorder,postorder,Start,Index-1,pIndex);

    return node;
}

TreeNode* constructBinaryTreeFromPostorderAndInorderTraversal(vector<int> &postorder, vector<int> &inorder) {
    int n=inorder.size();
    int pIndex=n-1;
    return buildTree(inorder,postorder,0,n-1,pIndex);
}
